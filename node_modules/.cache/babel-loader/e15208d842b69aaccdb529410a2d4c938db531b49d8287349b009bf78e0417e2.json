{"ast":null,"code":"var _jsxFileName = \"/Users/irmamodzgvrishvili/personal-website/src/Portfolio.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Portfolio() {\n  _s();\n  const [projects, setProjects] = useState([]);\n  const apiUrl = process.env.REACT_APP_API_URL;\n  useEffect(() => {\n    axios.get(`${apiUrl}/api/projects`).then(response => {\n      const projectsData = response.data;\n\n      // Fetch categories separately to create a mapping of categoryId to categoryName\n      axios.get(`${apiUrl}/api/categories`).then(categoriesResponse => {\n        const categoryMap = categoriesResponse.data.reduce((map, category) => {\n          map[category.id] = category.categoryName;\n          return map;\n        }, {});\n\n        // Join category names with project data\n        const projectsWithCategoryNames = projectsData.map(project => ({\n          ...project,\n          CategoryName: categoryMap[project.CategoryId]\n        }));\n\n        // Group projects by category name\n        const groupedProjects = projectsWithCategoryNames.reduce((grouped, project) => {\n          if (!grouped[project.CategoryName]) {\n            grouped[project.CategoryName] = [];\n          }\n          grouped[project.CategoryName].push(project);\n          return grouped;\n        }, {});\n        setProjects(groupedProjects);\n      }).catch(error => {\n        console.error('Error retrieving categories:', error);\n      });\n    }).catch(error => {\n      console.error('Error retrieving projects:', error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"portfolio\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My Portfolio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"project-list\",\n      children: Object.keys(projects).map(categoryName => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: categoryName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), projects[categoryName].map(project => /*#__PURE__*/_jsxDEV(ProjectDetails, {\n          project: project\n        }, project.Id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this))]\n      }, categoryName, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(Portfolio, \"TSrpuQX6QU8EgjQSxaAzj2u9i4o=\");\n_c = Portfolio;\nexport default Portfolio;\nvar _c;\n$RefreshReg$(_c, \"Portfolio\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Portfolio","_s","projects","setProjects","apiUrl","process","env","REACT_APP_API_URL","get","then","response","projectsData","data","categoriesResponse","categoryMap","reduce","map","category","id","categoryName","projectsWithCategoryNames","project","CategoryName","CategoryId","groupedProjects","grouped","push","catch","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","ProjectDetails","Id","_c","$RefreshReg$"],"sources":["/Users/irmamodzgvrishvili/personal-website/src/Portfolio.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction Portfolio() {\n  const [projects, setProjects] = useState([]);\n  const apiUrl = process.env.REACT_APP_API_URL;\n\n  useEffect(() => {\n    axios\n      .get(`${apiUrl}/api/projects`)\n      .then((response) => {\n        const projectsData = response.data;\n\n        // Fetch categories separately to create a mapping of categoryId to categoryName\n        axios\n          .get(`${apiUrl}/api/categories`)\n          .then((categoriesResponse) => {\n            const categoryMap = categoriesResponse.data.reduce((map, category) => {\n              map[category.id] = category.categoryName;\n              return map;\n            }, {});\n\n            // Join category names with project data\n            const projectsWithCategoryNames = projectsData.map((project) => ({\n              ...project,\n              CategoryName: categoryMap[project.CategoryId],\n            }));\n\n            // Group projects by category name\n            const groupedProjects = projectsWithCategoryNames.reduce((grouped, project) => {\n              if (!grouped[project.CategoryName]) {\n                grouped[project.CategoryName] = [];\n              }\n              grouped[project.CategoryName].push(project);\n              return grouped;\n            }, {});\n\n            setProjects(groupedProjects);\n          })\n          .catch((error) => {\n            console.error('Error retrieving categories:', error);\n          });\n      })\n      .catch((error) => {\n        console.error('Error retrieving projects:', error);\n      });\n  }, []);\n\n  return (\n    <div className=\"portfolio\">\n      <h1>My Portfolio</h1>\n      <div className=\"project-list\">\n        {Object.keys(projects).map((categoryName) => (\n          <div key={categoryName}>\n            <h2>{categoryName}</h2>\n            {projects[categoryName].map((project) => (\n              <ProjectDetails key={project.Id} project={project} />\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Portfolio;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}